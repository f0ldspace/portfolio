#!/usr/bin/env node

const fs = require("fs");
const path = require("path");

function parseFrontmatter(content) {
  const frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n([\s\S]*)$/;
  const match = content.match(frontmatterRegex);

  if (!match) return { frontmatter: {}, content };

  const frontmatterText = match[1];
  const bodyContent = match[2];
  const frontmatter = {};

  frontmatterText.split("\n").forEach((line) => {
    const [key, ...valueParts] = line.split(":");
    if (key && valueParts.length) {
      frontmatter[key.trim()] = valueParts.join(":").trim();
    }
  });

  return { frontmatter, content: bodyContent };
}

function generateId(filename) {
  return path.basename(filename, path.extname(filename));
}

function readContentFiles(dir, type) {
  const items = [];

  if (!fs.existsSync(dir)) {
    console.log(`Directory ${dir} doesn't exist, skipping...`);
    return items;
  }

  const files = fs
    .readdirSync(dir)
    .filter((file) => file.endsWith(".md") || file.endsWith(".html"))
    .sort();

  for (const file of files) {
    const filePath = path.join(dir, file);
    const content = fs.readFileSync(filePath, "utf8");
    const { frontmatter, content: bodyContent } = parseFrontmatter(content);

    if (type === "project") {
      if (!frontmatter.start_date) {
        console.warn(`Warning: ${file} missing start_date`);
        continue;
      }

      items.push({
        id: generateId(file),
        title: frontmatter.title || generateId(file).replace(/-/g, " "),
        startDate: frontmatter.start_date,
        ...(frontmatter.end_date && { endDate: frontmatter.end_date }),
        content: bodyContent.trim(),
      });
    }
  }

  return items;
}


function main() {
  console.log("Building data.js from content files...");

  const projects = readContentFiles("projects", "project");

  const dataContent = `// autogenerated file
// generated by build js file

const PROJECTS = ${JSON.stringify(projects, null, 2)};
`;

  fs.writeFileSync("data.js", dataContent);

  console.log(
    `Generated data.js with ${projects.length} projects`,
  );
  console.log("Projects:", projects.map((p) => p.id).join(", "));
}

if (require.main === module) {
  main();
}

